{"meta":{"title":"Down to the Rabbit Hole","subtitle":"放映机 方向键 二进制 多巴胺","description":null,"author":"crvdgc","url":"http://crvdgc.me"},"pages":[{"title":"about","date":"2018-07-24T09:51:30.000Z","updated":"2018-07-28T17:39:28.150Z","comments":true,"path":"about/index.html","permalink":"http://crvdgc.me/about/index.html","excerpt":"","text":"Down to the Rabbit Hole兔子洞中到底有什么呢？ 这是一个科幻＋计算机爱好者的小站。 关注二进制、放映机、方向键和多巴胺的一切。 联系方式 Github: https://www.github.com/crvdgc/ 微信: yokis1997 邮件（推荐）: yokis1997@pku.edu.cn 友情链接： 微信公众号： 老火箭酒吧 laorocketbar"}],"posts":[{"title":"编程解决《去月球》 To the Moon 记忆碎片小游戏","slug":"memento-solver","date":"2018-07-28T17:24:21.000Z","updated":"2018-07-30T07:11:09.421Z","comments":true,"path":"2018/07/29/memento-solver/","link":"","permalink":"http://crvdgc.me/2018/07/29/memento-solver/","excerpt":"","text":"引言记忆碎片（Memento）是游戏《去月球》（To the Moon）中的一个解谜小游戏。基本规则已在游戏中介绍。即通过点击按钮翻转某一行、列或者对角线，直至所有碎片都转成同一面。 这个解谜与成就/剧情分支无关，而且谜题设置比较简单，比较适合自己玩。谜题也非随机生成，答案都可以在网上找到。 兴趣使然地写了一个编程通用解法。在此介绍一下。 分析注意到同一位置进行任意偶数次变换都等价于不变，而奇数次变换等价于进行 1 次。为使总变换次数最少，只需决定每个位置是否进行变换即可。 其次，多个不同变换之间满足交换律和结合律，即任意改变变换之间的顺序不会影响最终的结果。 因此，每个解决方案，对应到将变换集合映射到 {进行，不进行} 集合的一个函数映射。若有 N 种可能的变换，则共有 2^N 种可能的解决方案。 可以使用二进制编码，宽度为 行数 + 列数 + 1 。每一位都对应着翻转行、列或对角线。该位为 1 代表进行变换，该位为 0 代表不进行变换。 接下来我们只需要枚举所有可能的解决方案，并将其中正确的挑选出来即可。 游戏中给出了最佳步数，因此可以作为加速搜索的方式，一旦解决方案中，变换的次数超过最佳步数，则跳过。这样，整个搜索空间大小从 2^N 减小到了 C(N, B) ，其中 B 是最佳变换次数， C 是组合数。 实现首先处理输入，我们将输入的图形转换为一个布尔矩阵。 12345rowNum = int(input('Row number: '))colNum = int(input('Col number: '))best = int(input('Best move: '))print(\"Input table, 1 for solved, 0 for unsolved\")table = [list(map(lambda x: True if int(x) == 1 else False, input().split())) for i in range(rowNum)] 接下来定义一些工具函数： def check(): return all([all(row) for row in table]) def flip(i, j): table[i][j] = False if table[i][j] else True 我们需要从解决方案中提取对应的行、列、对角线进行翻转： def apply_solution(solution): for r in range(rowNum): if solution[r]: for c in range(colNum): flip(r, c) for c in range(colNum): if solution[rowNum+c]: for r in range(rowNum): flip(r, c) if solution[-1]: # diagnol, from left-bottom for i in range(min(rowNum, colNum)): flip(rowNum-1-i, i) 注意，对角线是从左下角开始的。 类似的，我们定义打印解决方案的函数： def print_solution(solution): for r in range(rowNum): if solution[r]: print(&apos;r%s&apos; % r) for c in range(colNum): if solution[rowNum+c]: print(&apos;c%s&apos; % c) if solution[-1]: print(&apos;d&apos;) 注意，编号从 0 开始，方向是从上到下、从左到右。 d 代表对角线。 主要过程是枚举整个解决方案空间： for solution in itertools.product([False, True], repeat=rowNum+colNum+1): if solution.count(True) &gt; best: continue apply_solution(solution) if check(): print_solution(solution) break else: apply_solution(solution) else: print(&apos;No answer for best move %s&apos; % best) 首先，使用 itertools.product 产生所有的编码。 对于每一个编码，如果变换数大于最佳，则跳过当前。 如果找到了一个解，则打印并跳出，否则重新调用 apply_solution 函数将表格恢复原状态。 测试Row number: 3 Col number: 3 Best move: 2 Input table, 1 for solved, 0 for unsolved 1 0 0 1 0 0 1 0 0 c1 c2 Row number: 3 Col number: 3 Best move: 3 Input table, 1 for solved, 0 for unsolved 1 0 0 0 0 0 0 0 1 r1 c1 d 附注itertools.product该函数产生一系列 iterable 的笛卡尔积（Cartesian product），如果指明了 repeat 关键字参数，则会将前面所有的 iterable 再和自己进行笛卡尔积。 全局依赖由于对角线的存在，每一次枚举行/列无法完全确定其他某个变换是否进行，因此没有进一步减小空间的机会。 但事实上，除了第一个谜题，游戏中每个谜题都包含对角线。因此，可以默认只在奇数编码中搜索。将对角线放在最后一位也有利于快速找到解决方案。 完整代码gist import itertools def solve_memento(): rowNum = int(input(&apos;Row number: &apos;)) colNum = int(input(&apos;Col number: &apos;)) best = int(input(&apos;Best move: &apos;)) print(&quot;Input table, 1 for solved, 0 for unsolved&quot;) table = [list(map(lambda x: True if int(x) == 1 else False, input().split())) for i in range(rowNum)] def check(): return all([all(row) for row in table]) def flip(i, j): table[i][j] = False if table[i][j] else True def apply_solution(solution): for r in range(rowNum): if solution[r]: for c in range(colNum): flip(r, c) for c in range(colNum): if solution[rowNum+c]: for r in range(rowNum): flip(r, c) if solution[-1]: # diagnol, from left-bottom for i in range(min(rowNum, colNum)): flip(rowNum-1-i, i) def print_solution(solution): for r in range(rowNum): if solution[r]: print(&apos;r%s&apos; % r) for c in range(colNum): if solution[rowNum+c]: print(&apos;c%s&apos; % c) if solution[-1]: print(&apos;d&apos;) for solution in itertools.product([False, True], repeat=rowNum+colNum+1): if solution.count(True) &gt; best: continue apply_solution(solution) if check(): print_solution(solution) break else: apply_solution(solution) else: print(&apos;No answer for best move %s&apos; % best) solve_memento()","categories":[{"name":"计算机","slug":"计算机","permalink":"http://crvdgc.me/categories/计算机/"},{"name":"杂谈","slug":"计算机/杂谈","permalink":"http://crvdgc.me/categories/计算机/杂谈/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"http://crvdgc.me/tags/游戏/"},{"name":"python","slug":"python","permalink":"http://crvdgc.me/tags/python/"},{"name":"兴趣","slug":"兴趣","permalink":"http://crvdgc.me/tags/兴趣/"}]},{"title":"PKD 电子梦评论 - Real Life / Exhibit Piece","slug":"electricDreams-01","date":"2018-07-25T07:22:46.000Z","updated":"2018-07-30T07:06:43.673Z","comments":true,"path":"2018/07/25/electricDreams-01/","link":"","permalink":"http://crvdgc.me/2018/07/25/electricDreams-01/","excerpt":"","text":"电子梦系列PKD 的作品，改编成为电视剧、电影的不在少数。但我还是对《电子梦》抱有独特期待的。不同于以往短篇改电影（《少数派报告》），长篇改电影（《银翼杀手》），长篇改电视剧（《高堡奇人》），《电子梦》将 PKD 的短篇改编成单元剧。每一篇小说独立，每一集剧也独立。短篇小说是最能体现科幻“点子小说”特点的载体。没有了人物和情节的负担，小说可以尽情发挥某个点子设定。身为 PKD 迷，怎么能错过这部剧呢？ 不过看了剧之后，感觉有几集水平真心一般。故从攒着买全集的钱里拨款，买了一本对应小说集，看看原作是否如此。本系列博客对应于每一集每一篇的评论。 &lt;&lt;&lt;&lt; 主要剧透预警 &gt;&gt;&gt;&gt; Quick RecapReal Life 剧集的主角有两位，一位是 Sarah ，未来世界的女同警察，一次针对警察的屠杀的幸存者，另一位是 George ，生活在现代的布鲁斯韦恩——拥有巨额财产却热衷于亲自行侠仗义打击犯罪。准确来讲，两个人共享思想和记忆，因此只是一个人的两个身份——问题在于，哪个身份是真的？ 两人分别在自己的世界中，通过 VR 设备进入到另一个世界和身份中。他们的爱人 Katie 名字相同，长相也相同，他们都在追查同一个姓名的罪犯。甚至来到同一家餐厅吃着同样的汉堡。区别在于，未来世界的生活“too good to be true”。在现代世界中， George 的妻子被罪犯报复残忍杀害，追捕罪犯也以失败告终。未来世界中， Sarah 不仅家庭美满，也成功抓到了罪犯。 两个 VR 项目都是捕捉潜意识中的愿望，将其转化为体验的。一个世界是以另一个世界为基础想象出来的。 如果 Sarah 的身份是虚假的，那么这个未来世界仅仅是一个“科幻世界”，里面有飞车、女同、幸福的家庭、成功抓捕到了罪犯，一切都是为了缓解丧妻之痛的幻想。 如果 George 的生活是虚假的，现实世界是 Sarah 的赎罪场，用自己的幻想折磨自己，以此发泄自己不配有这样幸福生活的自卑和愧疚——幸存者常有的心理障碍 survivor’s guilt，凭什么我能活下来。 对于 Sarah 的过去有清晰的记忆，而 George 的过去则需经人提醒才能慢慢想起。最终，他/她选择了 George 的生活，打碎了 VR 设备。未来世界的妻子看着自己的爱人迷失在 VR 世界中——原来这个世界才是真实的。 “为什么她选择了那样的人生？” “因为她想被自己的罪过惩罚，无论是真实的，还是虚构的。” Exhibit Piece根据 wiki 中的链接，本篇小说已经进入公共领域了。这里可以找到电子版和PDF版。 小说的主角 George Miller 是未来高压社会下的一名历史研究员，专门研究 20 世纪 50 年代的历史（本篇小说最初发表时间 1954 年）。为了研究的氛围，他平时身着那个年代的服装（在未来则属于奇装异服）。在一次和上司的冲突后， 他被展品——一个 50 年代生活的复制品——中的声音所吸引而进入了展品中。在那里，他回忆起了自己在其中的生活，一个妻子，两个孩子，有些令人担心的上司。 他感到困惑，因此找到了过去世界中的心理医生 Grunberg ，对方认为两套理论同样有说服力，但 George 却提出了第三个理论——两个世界都是真实的。医生建议他回到自己在世界中移动的点上，这样就能确定哪个世界是真实的。 他在那里见到了自己未来世界的同事和上司，他们认定 George 患了狂想症，威胁他要将他安乐死，并将展品拆除。 George 认为未来的高压社会没有什么值得生活的。与之相比，50 年代竟然成为了自由的黄金年代。 George 表示，展品实际上是一个时空门，他通过它回到了过去，而其他人无法回去。拆除展品只是毁坏了时空门，他将永远留在过去——正是他所希望的。 当 George 回到家中拿起报纸时，却发现上面写着，俄罗斯展示钴炸弹，全世界将面临毁灭。 究竟未来世界是他的幻想，还是他真的相信自己的展品是一个真实的世界，因为展品的拆除才出现了炸弹的新闻。抑或他真的回到了过去，炸弹的出现才是导致未来社会高压的原因。 评论改编剧中几乎没有留下什么，但两篇的主题都是“变换的现实”——一个 PKD 作品中经常出现的主题。如果我们对于现实的认知不能超过感官所及，那么又怎能区分“真实的现实”和“虚拟的现实”。《黑客帝国》中探讨过相同的主题，然而这一篇与《攻壳机动队》中更进一步，如果连思想和记忆都可以进行虚拟，不仅世界的真实性变得不可靠，连自我的真实性都无法决定了。 看过《银翼杀手》的同学一定会对此感到熟悉，仿生人通过虚假记忆不知道自己是仿生人，这是一个核心设定，《银翼杀手2049》中，仿生人知道自己是仿生人，且知道自己有虚假的记忆，一下将揭示虚假记忆所展现的力量削弱到几乎没有了。 PKD 自己也经常怀疑所处的世界是否为真实，一如他笔下的人物，他又无法最终抉择究竟哪种世界为真，因此作品的结局常常是含糊的。改编中给出了明确的答案，因此转变成了对虚拟现实这一万能许愿机的警告。 此外，在面对多个可能的真实时，人总是需要选择一种“自己的真实”，也即相信哪一个真实才是“真实的真实”。在选择的过程中，一种标准是，一定要活在真实中，也就是选择最像真实的那个真实。另一种标准是，只要活在自己最喜欢的真实即可。除了选中的真实以外，其他世界中的人都会觉得你在有意无意地“欺骗自己”。 虽然两个故事都没有展示，不过发现自己的选择错误也是一个有趣的点。比如剧中，与虚拟人物热情相拥，但却看到整个世界渐渐陷入黑暗，会怎么想呢？后悔自己的决定？还是坚持自己的选择？ PKD 提出了问题，意识到自己没有能力去回答，因此他提出了更多的问题。 《电子梦》的执行出品人 Ronald D. Moore （《太空堡垒卡拉狄加》、《星际迷航7》、《星际迷航8》、《星际迷航：下一代》）为本篇写了导读。他在其中表达了对今年来虚拟现实技术的关注，因此将 VR 项目引入到了故事中。实际上，他自己作为编剧写过一部探讨虚拟现实的电影 Virtuality 。 PKD 的时代已经出现了 VR 技术的先声，尽管 PKD 并没有明确的展示使用何种设备进入虚拟的现实。但他的作品无疑谈及了更广泛意义上的模拟现实（Simulated Reality），甚至不是模拟，而是另一种完全不同的现实。","categories":[{"name":"科幻","slug":"科幻","permalink":"http://crvdgc.me/categories/科幻/"},{"name":"评论","slug":"科幻/评论","permalink":"http://crvdgc.me/categories/科幻/评论/"}],"tags":[{"name":"pkd","slug":"pkd","permalink":"http://crvdgc.me/tags/pkd/"},{"name":"剧集","slug":"剧集","permalink":"http://crvdgc.me/tags/剧集/"},{"name":"cyberpunk","slug":"cyberpunk","permalink":"http://crvdgc.me/tags/cyberpunk/"},{"name":"虚拟现实","slug":"虚拟现实","permalink":"http://crvdgc.me/tags/虚拟现实/"}]}]}